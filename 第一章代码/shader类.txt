#include<fstream>
#include<iostream>
#include<sstream>
#define GLEW_STATIC
#include<GL/glew.h>
#include<GLFW/glfw3.h>
#include"Shader.h"

Shader::Shader(const char* vertexPath, const char* fragmentPath) {
	std::ifstream vertexFile;
	std::ifstream fragmentFile;
	std::stringstream vertexSStream;
	std::stringstream fragmentSStream;
	vertexFile.open(vertexPath);
	fragmentFile.open(fragmentPath);
	vertexFile.exceptions(std::ifstream::failbit|| std::ifstream::badbit);
	fragmentFile.exceptions(std::ifstream::failbit || std::ifstream::badbit);
	try
	{
		if (!vertexFile.is_open() || !fragmentFile.is_open()) {
			throw std::exception("file open error!");
		}
		vertexSStream << vertexFile.rdbuf();
		fragmentSStream << fragmentFile.rdbuf();
		vertexString = vertexSStream.str();
		fragmentString = fragmentSStream.str();
		vertexSource = vertexString.c_str();
		fragmentSource = fragmentString.c_str();
		//测试
		/*std::cout << vertexSource << std::endl << fragmentSource << std::endl;*/
		unsigned int vertex, fragment;
		vertex = glCreateShader(GL_VERTEX_SHADER);
		glShaderSource(vertex,1,&vertexSource,nullptr);
		glCompileShader(vertex);
		checkCompileErrors(vertex, "VERTEX");
		fragment = glCreateShader(GL_FRAGMENT_SHADER);
		glShaderSource(fragment, 1, &fragmentSource, nullptr);
		glCompileShader(fragment);
		checkCompileErrors(fragment,"FRAGMENT");
		//猜测，有坑
		/*std::cout << (int)((fragmentSource)) << std::endl <<(int)((vertexSource))<< std::endl;*/
		ID = glCreateProgram();
		glAttachShader(ID,vertex);
		glAttachShader(ID, fragment);
		glLinkProgram(ID);
		checkCompileErrors(ID, "PROGRAM");
		glDeleteShader(vertex);
		glDeleteShader(fragment);
	}
	catch (const std::exception& ex)
	{
		std::cout << ex.what();
	}

}
void Shader::use() {
	glUseProgram(ID);
}
void Shader::checkCompileErrors(unsigned int ID, std::string type) {
	int success;
	char infoLog[512];
	if (type != "PROGRAM") {
		glGetShaderiv(ID, GL_COMPILE_STATUS, &success);
		if (!success) {
			glGetShaderInfoLog(ID, 512, nullptr, infoLog);
			std::cout << "shader compile error:"<<infoLog<<std::endl;
		}
	}
	else {
		glGetProgramiv(ID, GL_LINK_STATUS, &success);
		if (!success) {
			glGetProgramInfoLog(ID, 512,nullptr, infoLog);
			std::cout << "program linking error:" << infoLog << std::endl;
		}
	}
}