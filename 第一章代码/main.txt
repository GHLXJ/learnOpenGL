#define GLEW_STATIC
#include<GL/glew.h>
#include<GLFW/glfw3.h>
#include<iostream>
#include"Shader.h"
#define STB_IMAGE_IMPLEMENTATION
#include "stb_image.h"
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>
#include"Camera.h"


//float vertices[] = {
//		//     ---- 位置 ----       ---- 颜色 ----     - 纹理坐标 -
//			 0.5f,  0.5f, 0.0f,   1.0f, 0.0f, 0.0f,   1.0f, 1.0f,   // 右上
//			 0.5f, -0.5f, 0.0f,   0.0f, 1.0f, 0.0f,   1.0f, 0.0f,   // 右下
//			-0.5f, -0.5f, 0.0f,   0.0f, 0.0f, 1.0f,   0.0f, 0.0f,   // 左下
//			-0.5f,  0.5f, 0.0f,   1.0f, 1.0f, 0.0f,   0.0f, 1.0f    // 左上
//		};
float vertices[] = {
	-0.5f, -0.5f, -0.5f,  0.0f, 0.0f,
	 0.5f, -0.5f, -0.5f,  1.0f, 0.0f,
	 0.5f,  0.5f, -0.5f,  1.0f, 1.0f,
	 0.5f,  0.5f, -0.5f,  1.0f, 1.0f,
	-0.5f,  0.5f, -0.5f,  0.0f, 1.0f,
	-0.5f, -0.5f, -0.5f,  0.0f, 0.0f,

	-0.5f, -0.5f,  0.5f,  0.0f, 0.0f,
	 0.5f, -0.5f,  0.5f,  1.0f, 0.0f,
	 0.5f,  0.5f,  0.5f,  1.0f, 1.0f,
	 0.5f,  0.5f,  0.5f,  1.0f, 1.0f,
	-0.5f,  0.5f,  0.5f,  0.0f, 1.0f,
	-0.5f, -0.5f,  0.5f,  0.0f, 0.0f,

	-0.5f,  0.5f,  0.5f,  1.0f, 0.0f,
	-0.5f,  0.5f, -0.5f,  1.0f, 1.0f,
	-0.5f, -0.5f, -0.5f,  0.0f, 1.0f,
	-0.5f, -0.5f, -0.5f,  0.0f, 1.0f,
	-0.5f, -0.5f,  0.5f,  0.0f, 0.0f,
	-0.5f,  0.5f,  0.5f,  1.0f, 0.0f,

	 0.5f,  0.5f,  0.5f,  1.0f, 0.0f,
	 0.5f,  0.5f, -0.5f,  1.0f, 1.0f,
	 0.5f, -0.5f, -0.5f,  0.0f, 1.0f,
	 0.5f, -0.5f, -0.5f,  0.0f, 1.0f,
	 0.5f, -0.5f,  0.5f,  0.0f, 0.0f,
	 0.5f,  0.5f,  0.5f,  1.0f, 0.0f,

	-0.5f, -0.5f, -0.5f,  0.0f, 1.0f,
	 0.5f, -0.5f, -0.5f,  1.0f, 1.0f,
	 0.5f, -0.5f,  0.5f,  1.0f, 0.0f,
	 0.5f, -0.5f,  0.5f,  1.0f, 0.0f,
	-0.5f, -0.5f,  0.5f,  0.0f, 0.0f,
	-0.5f, -0.5f, -0.5f,  0.0f, 1.0f,

	-0.5f,  0.5f, -0.5f,  0.0f, 1.0f,
	 0.5f,  0.5f, -0.5f,  1.0f, 1.0f,
	 0.5f,  0.5f,  0.5f,  1.0f, 0.0f,
	 0.5f,  0.5f,  0.5f,  1.0f, 0.0f,
	-0.5f,  0.5f,  0.5f,  0.0f, 0.0f,
	-0.5f,  0.5f, -0.5f,  0.0f, 1.0f
};
unsigned int indices[] = {
	// 注意索引从0开始! 
	// 此例的索引(0,1,2,3)就是顶点数组vertices的下标，
	// 这样可以由下标代表顶点组合成矩形

	0, 1, 2, // 第一个三角形
	2, 3, 0  // 第二个三角形
};

glm::vec3 cubePositions[] = {
  glm::vec3(0.0f,  0.0f,  0.0f),
  glm::vec3(2.0f,  5.0f, -15.0f),
  glm::vec3(-1.5f, -2.2f, -2.5f),
  glm::vec3(-3.8f, -2.0f, -12.3f),
  glm::vec3(2.4f, -0.4f, -3.5f),
  glm::vec3(-1.7f,  3.0f, -7.5f),
  glm::vec3(1.3f, -2.0f, -2.5f),
  glm::vec3(1.5f,  2.0f, -2.5f),
  glm::vec3(1.5f,  0.2f, -1.5f),
  glm::vec3(-1.3f,  1.0f, -1.5f)
};
double lastXpos;
double lastYpos;
bool firstMouse = true;
//相机类
/*Camera camera(glm::vec3(0, 0, 3.0f), glm::vec3(0, 0, 0), glm::vec3(0, 1.0f, 0));*/
Camera camera(glm::vec3(0, 0, 3.0f), glm::radians(15.0f), glm::radians(180.0f), glm::vec3(0, 1.0f, 0));

void processInput(GLFWwindow* window);
void mouse_callback(GLFWwindow* window, double xPos, double yPos);

int main() {
	//glfw初始化
	glfwInit();
	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
	glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
	//open GLFW window 
	GLFWwindow* window = glfwCreateWindow(800, 600, "my OpenGL game", nullptr, nullptr);
	if (window == nullptr) {
		std::cout << "error,window is null"<<std::endl;
		glfwTerminate();
		return -1;
	}
	//设置当前线程的主要上下文
	glfwMakeContextCurrent(window);
	glfwSetInputMode(window, GLFW_CURSOR, GLFW_CURSOR_DISABLED);
	glfwSetCursorPosCallback(window, mouse_callback);
	//glew 初始化
	glewExperimental = true;
	if (glewInit() != GLEW_OK) {
		std::cout << "error,glewInit error!";
		glfwTerminate();
		return 0;
	}
	glViewport(0, 0, 800, 600);
	//Shader对象
	Shader* myShader = new Shader("vertexSource.txt", "fragmentSource.txt");
	//剔除反面
	/*glEnable(GL_CULL_FACE);
	glCullFace(GL_BACK);*/
	//线框模式
	/*glPolygonMode(GL_FRONT_AND_BACK,GL_LINE);*/
	glEnable(GL_DEPTH_TEST);
	// VAO,上方位置：array buffer （下方位置：E buffer）
	unsigned int VAO;
	glGenVertexArrays(1,&VAO);
	glBindVertexArray(VAO);
	//VBO 绑定在VAO上方位置
	unsigned int VBO;
	glGenBuffers(1,&VBO);
	glBindBuffer(GL_ARRAY_BUFFER,VBO);
	//将自定义顶点数据拷贝到GL_ARRAY_BUFFER
	glBufferData(GL_ARRAY_BUFFER,sizeof(vertices),vertices,GL_STATIC_DRAW);
	//绑定EBO
	unsigned int EBO;
	glGenBuffers(1,&EBO);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,EBO);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);
	////创建vertexShader
	//unsigned int vertexShader;
	//vertexShader = glCreateShader(GL_VERTEX_SHADER);
	//glShaderSource(vertexShader,1,&vertesShaderSource, nullptr);
	//glCompileShader(vertexShader);
	////创建fragmentShader
	//unsigned int fragmentShader;
	//fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);
	//glShaderSource(fragmentShader,1,&fragmentShaderSource,nullptr);
	//glCompileShader(fragmentShader);
	////创建shader program
	//unsigned int shaderProgram;
	//shaderProgram = glCreateProgram();
	//glAttachShader(shaderProgram,vertexShader);
	//glAttachShader(shaderProgram,fragmentShader);
	//glLinkProgram(shaderProgram);
	//从VBO中拿取顶点数据，打开VAO的零号位置
	//glVertexAttribPointer(0,3,GL_FLOAT,GL_FALSE,8*sizeof(float),(void*)0);
	//glEnableVertexAttribArray(0);
	////从VBO中拿取顶点颜色数据，打开VAO的一号位置
	//glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(sizeof(float)*3));
	//glEnableVertexAttribArray(1);
	////从VBO中拿取UV坐标
	//glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(sizeof(float) * 6));
	//glEnableVertexAttribArray(2);
	// 3D
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)0);
	glEnableVertexAttribArray(0);
	glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)(sizeof(float)*3));
	glEnableVertexAttribArray(2);
	//导入图片前翻转Y轴
	stbi_set_flip_vertically_on_load(true);
	//创建textureBuffer并绑定GL_TEXTURE_2D
	unsigned int TexBufferA;
	glGenTextures(1,&TexBufferA);
	glActiveTexture(GL_TEXTURE0);
	glBindTexture(GL_TEXTURE_2D, TexBufferA);
	//用stb_image.h库函数存放导入的texture数据 texture_1
	int width, height, nrChannels;
	unsigned char* data = stbi_load("container.jpg", &width, &height, &nrChannels, 0);
	if (data) {
		glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, data);
		glGenerateMipmap(GL_TEXTURE_2D);
	}
	else {
		std::cout << "load texture to TexBufferA error!" << std::endl;
	}
	stbi_image_free(data);
	//用stb_image.h库函数存放导入的texture数据 texture_2
	unsigned int TexBufferB;
	glGenTextures(1, &TexBufferB);
	glActiveTexture(GL_TEXTURE3);
	glBindTexture(GL_TEXTURE_2D, TexBufferB);
	unsigned char* data2 = stbi_load("awesomeface.png", &width, &height, &nrChannels, 0);
	if (data2) {
		glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, data2);
		glGenerateMipmap(GL_TEXTURE_2D);
	}
	else {
		std::cout << "load texture to TexBufferB error!" << std::endl;
	}
	stbi_image_free(data2);
	//模型矩阵，观察矩阵，投影矩阵
	glm::mat4 modelMat;
	modelMat = glm::rotate(modelMat, glm::radians(-55.0f), glm::vec3(1.0f,0,0));
	glm::mat4 viewMat;
	/*viewMat = camera.GetViewMatrix();*/
	/*viewMat = glm::translate(viewMat, glm::vec3(0, 0, -3.0f));*/
	glm::mat4 proMat;
	proMat = glm::perspective(glm::radians(45.0f), 800.0f / 600.0f, 0.1f, 100.0f);
	/*glUseProgram(shaderProgram);*/
	//循环体，判断窗口是否关闭
	while (!glfwWindowShouldClose(window)) {
		//延迟处理输入
		processInput(window);
		//清屏并清除深度缓冲，渲染纯色
		glClearColor(0,0.5f,0.5f,1.0f);
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
		//再次指定GL_TEXTURE_2D内索引并绑定GL_TEXTURE_2D
		glActiveTexture(GL_TEXTURE0);
		glBindTexture(GL_TEXTURE_2D, TexBufferA);
		glActiveTexture(GL_TEXTURE3);
		glBindTexture(GL_TEXTURE_2D, TexBufferB);
		//绑定VAO,EBO之前绑定在此VAO上，可以不用再绑定
		glBindVertexArray(VAO);
		//float current_time = glfwGetTime();
		////直接通过uniform从CPU传数据到fragmentShader
		//float greenValue = (sin(current_time) / 2.0f) + 0.5f;
		//int vertexColorLocation = glGetUniformLocation(shaderProgram,"myFragColor");
		//glUseProgram(shaderProgram);
		//glUniform4f(vertexColorLocation,0, greenValue,0,1.0f);

		viewMat = camera.GetViewMatrix();
		for (int i = 0; i < 10; i++) {
			glm::mat4 modelMat2; 
			modelMat2 = glm::translate(modelMat2, cubePositions[i]);
			myShader->use();
			glUniform1i(glGetUniformLocation(myShader->ID, "ourTextureA"), 0);
			glUniform1i(glGetUniformLocation(myShader->ID, "ourTextureB"), 3);
			glUniformMatrix4fv(glGetUniformLocation(myShader->ID, "modelMat"), 1, GL_FALSE, glm::value_ptr(modelMat2));
			glUniformMatrix4fv(glGetUniformLocation(myShader->ID, "viewMat"), 1, GL_FALSE, glm::value_ptr(viewMat));
			glUniformMatrix4fv(glGetUniformLocation(myShader->ID, "proMat"), 1, GL_FALSE, glm::value_ptr(proMat));
			glDrawArrays(GL_TRIANGLES, 0, 36);
		}
		//使用shader program

		// 嵌套注释 S
		
		//myShader->use();
		//glUniform1i(glGetUniformLocation(myShader->ID, "ourTextureA"), 0);
		//glUniform1i(glGetUniformLocation(myShader->ID, "ourTextureB"), 3);
		//// 利用GLM库对渲染图形进行缩放，旋转，“位移”（注意）
		///*glm::mat4 trans;
		//trans = glm::translate(trans, glm::vec3(0.5f, -0.5f, 0.0f));
		//trans = glm::rotate(trans, glm::radians((float)glfwGetTime())*10, glm::vec3(0, 0, 1.0f));*/
		///*trans = glm::scale(trans, glm::vec3(1,1,1));*/
		//glUniformMatrix4fv(glGetUniformLocation(myShader->ID,"modelMat"), 1, GL_FALSE, glm::value_ptr(modelMat));
		//glUniformMatrix4fv(glGetUniformLocation(myShader->ID, "viewMat"), 1, GL_FALSE, glm::value_ptr(viewMat));
		//glUniformMatrix4fv(glGetUniformLocation(myShader->ID, "proMat"), 1, GL_FALSE, glm::value_ptr(proMat));
		//glDrawArrays(GL_TRIANGLES, 0, 36);
		///*glDrawElements(GL_TRIANGLES,6,GL_UNSIGNED_INT,0);*/

		// 嵌套注释 E

		glfwSwapBuffers(window);
		glfwPollEvents();
	}


	//正常退出
	glfwTerminate();
	return 0;
}

void processInput(GLFWwindow* window) {
	if(glfwGetKey(window,GLFW_KEY_ESCAPE)==GLFW_PRESS)
		glfwSetWindowShouldClose(window,true);
}

void mouse_callback(GLFWwindow* window, double xPos, double yPos) {
	if (firstMouse == true) {
		lastXpos = xPos;
		lastYpos = yPos;
		firstMouse = false;
	} 
	double deltaX, deltaY; 
	deltaX = xPos - lastXpos;
	deltaY = yPos - lastYpos;
	lastXpos = xPos;
	lastYpos = yPos;
	camera.ProcessMouseMovement(deltaX, deltaY);
}